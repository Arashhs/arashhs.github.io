[{"authors":["admin"],"categories":null,"content":"Arash is a final-year undergraduate student pursuing a B.Sc degree in Computer Engineering at the Amirkabir University of Technology (Tehran Polytechnic).\nHis main areas of interest include Software Engineering and Machine Learning. He also has strong mathematical and statistical skills and the ability to apply those skills to real-world problems.\nYou can check out his CV and Transcript.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://arashhs.github.io/author/arash-hajisafi/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/arash-hajisafi/","section":"authors","summary":"Arash is a final-year undergraduate student pursuing a B.Sc degree in Computer Engineering at the Amirkabir University of Technology (Tehran Polytechnic).\nHis main areas of interest include Software Engineering and Machine Learning.","tags":null,"title":"Arash Hajisafi","type":"authors"},{"authors":[],"categories":[],"content":"A terminal-based Hangman game written in C for the final project of my Introduction to Programming course in the first semester at university. Having save/load options and many other cool stuff!\nHereâ€™s some gameplay footage: \n","date":1597801502,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597801502,"objectID":"fc887861b46691d1dbb23c0196d9b832","permalink":"https://arashhs.github.io/project/hangman/","publishdate":"2020-08-19T06:15:02+04:30","relpermalink":"/project/hangman/","section":"project","summary":"A terminal-based Hangman game written in C for the final project of my Introduction to Programming course in the first semester at university","tags":["3"],"title":"Hangman","type":"project"},{"authors":[],"categories":[],"content":"","date":1597800239,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597800239,"objectID":"5127289ea9091ea7f84b179cb5e9c4b7","permalink":"https://arashhs.github.io/project/simple-image-compressor/","publishdate":"2020-08-19T05:53:59+04:30","relpermalink":"/project/simple-image-compressor/","section":"project","summary":"Implementation of an image compression algorithm in python using NumPy library for my Applied Linear Algebra course","tags":["3"],"title":"Simple Image Compressor","type":"project"},{"authors":[],"categories":[],"content":"I\u0026rsquo;ve implemented everyone\u0026rsquo;s favorite Battle Ship Game in Java for my Advanced Programming course. The game supports both single-player and local multiplayer modes and is console-based.\nHere\u0026rsquo;s some gameplay footage: (Click to open in full size on a new tab) \n","date":1597798578,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597798578,"objectID":"d49ab6a179bdab07d6e19f1477f540dd","permalink":"https://arashhs.github.io/project/battleship-game/","publishdate":"2020-08-19T05:26:18+04:30","relpermalink":"/project/battleship-game/","section":"project","summary":"Everyone's favorite Battle Ship Game implemented in Java","tags":["3"],"title":"Battleship Game","type":"project"},{"authors":[],"categories":[],"content":"","date":1597797044,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597797044,"objectID":"debd67f0d29bb1f7ef894700897e5ccc","permalink":"https://arashhs.github.io/project/elevator-circuit/","publishdate":"2020-08-19T05:00:44+04:30","relpermalink":"/project/elevator-circuit/","section":"project","summary":"An elevator circuit designed and implemented in Verilog for the final project of my Logic Circuits course","tags":["3"],"title":"Elevator Circuit","type":"project"},{"authors":[],"categories":[],"content":"Example Command:\n(eval-exp (with \u0026quot;f1\u0026quot; (lam \u0026quot;f1\u0026quot; \u0026quot;a\u0026quot; (with \u0026quot;x\u0026quot; (var \u0026quot;a\u0026quot;) (lam \u0026quot;f2\u0026quot; \u0026quot;z\u0026quot; (plus (var \u0026quot;x\u0026quot;) (num 1)))))\r(with \u0026quot;f3\u0026quot; (lam \u0026quot;f3\u0026quot; \u0026quot;f\u0026quot; (with \u0026quot;x\u0026quot; (num 1729) (apply (var \u0026quot;f\u0026quot;) (munit)))) (apply (var \u0026quot;f3\u0026quot;) (apply (var \u0026quot;f1\u0026quot;) (num 1))))))\r Output:\n(num 2)\r ","date":1597796277,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597796277,"objectID":"9aea3c6710405ea3aee6b3ec5bd8f869","permalink":"https://arashhs.github.io/project/numex-interpreter/","publishdate":"2020-08-19T04:47:57+04:30","relpermalink":"/project/numex-interpreter/","section":"project","summary":"A pure functional implementation of NUMEX (Number Expression Programming Language) written in Racket","tags":["3"],"title":"NUMEX Interpreter","type":"project"},{"authors":[],"categories":[],"content":"","date":1597795007,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597795007,"objectID":"8440a2a4e81514fce3111633c7e05ee4","permalink":"https://arashhs.github.io/project/matrix-equation-solver-hardware-implementation/","publishdate":"2020-08-19T04:26:47+04:30","relpermalink":"/project/matrix-equation-solver-hardware-implementation/","section":"project","summary":"Implementation of a matrix equation solver algorithm in VHDL for the final project of my Design Automation (FPGA) course","tags":["3"],"title":"Matrix Equation Solver Hardware Implementation","type":"project"},{"authors":[],"categories":[],"content":"","date":1597794415,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597794415,"objectID":"be7e57d88b04f212ed9b3f3f08a77546","permalink":"https://arashhs.github.io/project/voice-gender-detection/","publishdate":"2020-08-19T04:16:55+04:30","relpermalink":"/project/voice-gender-detection/","section":"project","summary":"Gender detection project based on audio files written in MATLAB for the final project of my Signals and Systems course","tags":["2"],"title":"Voice Gender Detection","type":"project"},{"authors":[],"categories":[],"content":"","date":1597793032,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597793032,"objectID":"2ab7ed5ebd3fe4175f4c1c4734aba488","permalink":"https://arashhs.github.io/project/google-search-query-parser/","publishdate":"2020-08-19T03:53:52+04:30","relpermalink":"/project/google-search-query-parser/","section":"project","summary":"A simple google search query parser and report generator web application using Java, Spring Framework, and Maven","tags":["2"],"title":"Google Search Query Parser","type":"project"},{"authors":[],"categories":[],"content":" Lexical Analysis, Syntax Analysis, Semantic Analysis, and Intermediate Code Generation implemented using JFlex and Bison for my Compiler Design course project for the grammar which is included in the repository Generated code representation is in three address code format  How to compile Make sure that you have set up Bison and Flex properly, then run the following code in terminal:\nbison -L JAVA SHLang.yac -v\rdel SHLang.java\rren SHLang.cac SHLang.java\rjavac Yylex.java SHLang.java\rjava YYParser\rgcc compiler.c\r Alternatively, you can run the run.bat file.\nExample Input:\nProgram p1Main;\rReal n1, n2, n3, n4, n5;\rBegin\rn1 := #20 - #10 / #2;\rn2 := n1 / (#3 + #2);\rn3 := n1 * n2 - #10;\tIf(n1 .GT. #2) Then Begin\rFor n4:=n2 Downto #0 Do Begin\rn3 := n3 + #1;\rn2 := n2 - #1\rEnd\rEnd Else\rIf(n2 .NE. #3) Then n2 := #80\rEnd;\r  Output:\n#include \u0026lt;stdio.h\u0026gt;\rint main() {\r// ////////////////// Symbol Table \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\\\\rdouble n1;\rdouble n2;\rdouble n3;\rdouble n4;\rdouble n5;\rint __SHLangTempVar0;\rint __SHLangTempVar1;\rint __SHLangTempVar2;\rint __SHLangTempVar3;\rint __SHLangTempVar4;\rdouble __SHLangTempVar5;\rint __SHLangTempVar6;\rint __SHLangTempVar7;\rint __SHLangTempVar8;\rdouble __SHLangTempVar9;\rdouble __SHLangTempVar10;\rdouble __SHLangTempVar11;\rint __SHLangTempVar12;\rdouble __SHLangTempVar13;\rdouble __SHLangTempVar14;\rint __SHLangTempVar15;\rint __SHLangTempVar16;\rint __SHLangTempVar17;\rint __SHLangTempVar18;\rdouble __SHLangTempVar19;\rdouble __SHLangTempVar20;\rint __SHLangTempVar21;\rdouble __SHLangTempVar22;\rdouble __SHLangTempVar23;\rint __SHLangConditionVarn4;\rint __SHLangTempVar24;\rint __SHLangTempVar25;\rint __SHLangTempVar26;\rdouble __SHLangTempVar27;\r// ////////////////// Quadruples \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\\\\rLine0:\t__SHLangTempVar0 = 20;\rLine1:\tif (__SHLangTempVar0) goto Line3;\rLine2:\tgoto Line3;\rLine3:\t__SHLangTempVar1 = 10;\rLine4:\tif (__SHLangTempVar1) goto Line6;\rLine5:\tgoto Line6;\rLine6:\t__SHLangTempVar2 = 2;\rLine7:\tif (__SHLangTempVar2) goto Line9;\rLine8:\tgoto Line9;\rLine9:\t__SHLangTempVar3 = __SHLangTempVar1 / __SHLangTempVar2;\rLine10:\tif (__SHLangTempVar3) goto Line12;\rLine11:\tgoto Line12;\rLine12:\t__SHLangTempVar4 = __SHLangTempVar0 - __SHLangTempVar3;\rLine13:\tif (__SHLangTempVar4) goto Line15;\rLine14:\tgoto Line15;\rLine15:\t__SHLangTempVar5 = (double) __SHLangTempVar4;\rLine16:\tn1 = __SHLangTempVar5;\rLine17:\tprintf(\u0026quot;%s = %f\\n\u0026quot;, \u0026quot;n1\u0026quot;, n1);\rLine18:\tgoto Line19;\rLine19:\tif (n1) goto Line21;\rLine20:\tgoto Line21;\rLine21:\t__SHLangTempVar6 = 3;\rLine22:\tif (__SHLangTempVar6) goto Line24;\rLine23:\tgoto Line24;\rLine24:\t__SHLangTempVar7 = 2;\rLine25:\tif (__SHLangTempVar7) goto Line27;\rLine26:\tgoto Line27;\rLine27:\t__SHLangTempVar8 = __SHLangTempVar6 + __SHLangTempVar7;\rLine28:\tif (__SHLangTempVar8) goto Line30;\rLine29:\tgoto Line30;\rLine30:\t__SHLangTempVar10 = (double) __SHLangTempVar8;\rLine31:\t__SHLangTempVar9 = n1 / __SHLangTempVar10;\rLine32:\tif (__SHLangTempVar9) goto Line34;\rLine33:\tgoto Line34;\rLine34:\tn2 = __SHLangTempVar9;\rLine35:\tprintf(\u0026quot;%s = %f\\n\u0026quot;, \u0026quot;n2\u0026quot;, n2);\rLine36:\tgoto Line37;\rLine37:\tif (n1) goto Line39;\rLine38:\tgoto Line39;\rLine39:\tif (n2) goto Line41;\rLine40:\tgoto Line41;\rLine41:\t__SHLangTempVar11 = n1 * n2;\rLine42:\tif (__SHLangTempVar11) goto Line44;\rLine43:\tgoto Line44;\rLine44:\t__SHLangTempVar12 = 10;\rLine45:\tif (__SHLangTempVar12) goto Line47;\rLine46:\tgoto Line47;\rLine47:\t__SHLangTempVar14 = (double) __SHLangTempVar12;\rLine48:\t__SHLangTempVar13 = __SHLangTempVar11 - __SHLangTempVar14;\rLine49:\tif (__SHLangTempVar13) goto Line51;\rLine50:\tgoto Line51;\rLine51:\tn3 = __SHLangTempVar13;\rLine52:\tprintf(\u0026quot;%s = %f\\n\u0026quot;, \u0026quot;n3\u0026quot;, n3);\rLine53:\tgoto Line54;\rLine54:\tif (n1) goto Line56;\rLine55:\tgoto Line56;\rLine56:\t__SHLangTempVar15 = 2;\rLine57:\tif (__SHLangTempVar15) goto Line59;\rLine58:\tgoto Line59;\rLine59:\t__SHLangTempVar16 = n1 \u0026gt; __SHLangTempVar15;\rLine60:\tif (__SHLangTempVar16) goto Line62;\rLine61:\tgoto Line100;\rLine62:\tif (n2) goto Line64;\rLine63:\tgoto Line64;\rLine64:\t__SHLangTempVar17 = 0;\rLine65:\tif (__SHLangTempVar17) goto Line67;\rLine66:\tgoto Line67;\rLine67:\tgoto Line92;\rLine68:\tif (n3) goto Line70;\rLine69:\tgoto Line70;\rLine70:\t__SHLangTempVar18 = 1;\rLine71:\tif (__SHLangTempVar18) goto Line73;\rLine72:\tgoto Line73;\rLine73:\t__SHLangTempVar20 = (double) __SHLangTempVar18;\rLine74:\t__SHLangTempVar19 = n3 + __SHLangTempVar20;\rLine75:\tif (__SHLangTempVar19) goto Line77;\rLine76:\tgoto Line77;\rLine77:\tn3 = __SHLangTempVar19;\rLine78:\tprintf(\u0026quot;%s = %f\\n\u0026quot;, \u0026quot;n3\u0026quot;, n3);\rLine79:\tgoto Line80;\rLine80:\tif (n2) goto Line82;\rLine81:\tgoto Line82;\rLine82:\t__SHLangTempVar21 = 1;\rLine83:\tif (__SHLangTempVar21) goto Line85;\rLine84:\tgoto Line85;\rLine85:\t__SHLangTempVar23 = (double) __SHLangTempVar21;\rLine86:\t__SHLangTempVar22 = n2 - __SHLangTempVar23;\rLine87:\tif (__SHLangTempVar22) goto Line89;\rLine88:\tgoto Line89;\rLine89:\tn2 = __SHLangTempVar22;\rLine90:\tprintf(\u0026quot;%s = %f\\n\u0026quot;, \u0026quot;n2\u0026quot;, n2);\rLine91:\tgoto Line97;\rLine92:\tn4 = n2;\rLine93:\t__SHLangConditionVarn4 = __SHLangTempVar17 - n4;\rLine94:\t__SHLangConditionVarn4 = n4 \u0026gt;= __SHLangTempVar17;\rLine95:\tif (__SHLangConditionVarn4) goto Line68;\rLine96:\tgoto Line115;\rLine97:\tn4 = n4 - 1;\rLine98:\tgoto Line93;\rLine99:\tgoto Line115;\rLine100:\tif (n2) goto Line102;\rLine101:\tgoto Line102;\rLine102:\t__SHLangTempVar24 = 3;\rLine103:\tif (__SHLangTempVar24) goto Line105;\rLine104:\tgoto Line105;\rLine105:\t__SHLangTempVar25 = n2 != __SHLangTempVar24;\rLine106:\tif (__SHLangTempVar25) goto Line108;\rLine107:\tgoto Line115;\rLine108:\t__SHLangTempVar26 = 80;\rLine109:\tif (__SHLangTempVar26) goto Line111;\rLine110:\tgoto Line111;\rLine111:\t__SHLangTempVar27 = (double) __SHLangTempVar26;\rLine112:\tn2 = __SHLangTempVar27;\rLine113:\tprintf(\u0026quot;%s = %f\\n\u0026quot;, \u0026quot;n2\u0026quot;, n2);\rLine114:\tgoto Line115;\rLine115:\tprintf(\u0026quot;Process is terminated with no error.\\n\u0026quot;);\rgetchar();\rreturn 0;\rLine116:\tprintf(\u0026quot;Array Error: Index out of bound!\\n\u0026quot;);\rgetchar();\rreturn -1;\rLine117:\tprintf(\u0026quot;Array Error: Invalid array size!\\n\u0026quot;);\rgetchar();\rreturn -2;\r}\r  Result:\nn1 = 15.000000\rn2 = 3.000000\rn3 = 35.000000\rn3 = 36.000000\rn2 = 2.000000\rn3 = 37.000000\rn2 = 1.000000\rn3 = 38.000000\rn2 = 0.000000\rn3 = 39.000000\rn2 = -1.000000\rProcess is terminated with no error.\r ","date":1597787997,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597787997,"objectID":"9f34fa0dfea1a019998635fceef1bc39","permalink":"https://arashhs.github.io/project/compiler-project/","publishdate":"2020-08-19T02:29:57+04:30","relpermalink":"/project/compiler-project/","section":"project","summary":"Principles of Compiler Design course project implemented using Bison and JFlex","tags":["2"],"title":"Compiler Project","type":"project"},{"authors":[],"categories":[],"content":"Design and Analysis of a Secure Smart-Card-Based Healthcare System The research consists of 2 main parts, the investigation of smart card architectures and modeling security threats in an Electronic Healthcare System. A functional system architecture has been proposed to address these security threats which specifies a smart-card-based authentication method. The research was conducted in the Spring and Summer of 2020 for my Research Method and Technical Presentation course (which includes both Written and Oral Presentations).\n","date":1597720003,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597720003,"objectID":"0de6641fe72c482b347a1041d769e262","permalink":"https://arashhs.github.io/project/research-secure-smart-card-based-healthcare-system/","publishdate":"2020-08-18T07:36:43+04:30","relpermalink":"/project/research-secure-smart-card-based-healthcare-system/","section":"project","summary":"My Research Method and Technical Presentation Course every step taken from deciding on a subject to the final writing and presentation","tags":["2"],"title":"Research Secure Smart Card Based Healthcare System","type":"project"},{"authors":[],"categories":[],"content":"I have implemented the EDF and FCFS scheduling algorithms in FreeRTOS for Arduino boards as part of my Real-Time and Embedded Systems course assignments.\n","date":1597719335,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597719335,"objectID":"054ea46551b08f4847b7a1e655fb56c2","permalink":"https://arashhs.github.io/project/modified-arduino-freertos-scheduling/","publishdate":"2020-08-18T07:25:35+04:30","relpermalink":"/project/modified-arduino-freertos-scheduling/","section":"project","summary":"Arduino FreeRTOS EDF and FCFS Scheduling Algorithms Implementation","tags":["2"],"title":"Modified Arduino FreeRTOS Scheduling","type":"project"},{"authors":[],"categories":[],"content":" Implemented a modified version of Xv6\u0026rsquo;s original scheduling algorithm and a modified priority-based scheduling algorithm to take both the waiting time and importance of a task into account Added system calls to choose the scheduling algorithm in a process, to count the number of called system calls in a process, and several more features Added the ability to measure creation time, termination time, sleeping time, ready time, and running time of processes to evaluate the performance of the new scheduling algorithms  ","date":1597718464,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597718464,"objectID":"62804f6cd823628863944ae4fc4a53a2","permalink":"https://arashhs.github.io/project/modified-xv6-with-new-features/","publishdate":"2020-08-18T07:11:04+04:30","relpermalink":"/project/modified-xv6-with-new-features/","section":"project","summary":"Adding system calls and implementing different scheduling policies to Xv6","tags":["2"],"title":"Modified Xv6 With New Features","type":"project"},{"authors":[],"categories":[],"content":"I have implemented threads and ticket lock in Xv6 for the final project of my Operating Systems course\n Modified XV6 process allocation, execution, and termination implementations to add support for threads so that each process can have multiple threads Modified scheduling algorithm to schedule threads Added Ticket Lock to the kernel  ","date":1597717697,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597717697,"objectID":"52808e516499ceb78da916d7f7b6c81d","permalink":"https://arashhs.github.io/project/threads-and-ticket-lock-implementation-in-xv6/","publishdate":"2020-08-18T06:58:17+04:30","relpermalink":"/project/threads-and-ticket-lock-implementation-in-xv6/","section":"project","summary":"Implementing threads as well as ticket lock in Xv6's kernel","tags":["1"],"title":"Threads and Ticket Lock Implementation in Xv6","type":"project"},{"authors":[],"categories":[],"content":"NetWolf is a P2P torrent-like network application written in Python for the final project of my Computer Networks Course with the following capabilities:\n Discovering clusters and maintaining a cluster list at each node by periodically sending a UDP customized DISCOVERY message Sharing files between nodes by sending a UDP customized GET message (which includes the files name), waiting for the answer, and selecting the best node (fastest response) and then establishing a TCP connection for transmitting the file  Application in action: (Click to open in full size on a new tab) \n","date":1597715864,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597715864,"objectID":"be7b01c3e7f37b9db01c2980e7041e84","permalink":"https://arashhs.github.io/project/netwolf/","publishdate":"2020-08-18T06:27:44+04:30","relpermalink":"/project/netwolf/","section":"project","summary":"A Peer-to-Peer file sharing application implemented in Python","tags":["1"],"title":"NetWolf","type":"project"},{"authors":[],"categories":[],"content":" A database system for restaurant management using Python Tkinter and MySQL for the final project of my Database Design course Applied ER and normalization techniques to design the database and adopted Python to build a GUI app to connect with the database and add/delete/edit records and tables, and execute queries on the database  Application in action: (Click to open in full size on a new tab) \n","date":1597706821,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597706821,"objectID":"baeb45cd8c38f717eabffa1faaa5e92e","permalink":"https://arashhs.github.io/project/restaurant-management-database/","publishdate":"2020-08-18T03:57:01+04:30","relpermalink":"/project/restaurant-management-database/","section":"project","summary":"Restaurant Management Database With GUI Using Python and MySQL","tags":["1"],"title":"Restaurant Management Database","type":"project"},{"authors":[],"categories":[],"content":"That\u0026rsquo;s MyTable V2 is a Java Spring MVC and Hibernate project used for the implementation of my Software Engineering (I) project for table booking and food reservations in a restaurant.\n Forked from That\u0026rsquo;s MyTable!, a Github repository which we applied different software evolution and maintenance techniques on to adapt the project with newer versions of Java and Spring framework and added many new functionalities such as food reservations and a better implementation for table booking and time management as well as fixing numerous bugs. Re-wrote the entire database from the ground up to adapt it with new functionalities  ","date":1597705964,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597705964,"objectID":"b67bb227e17e0e048daa36c3163f97e7","permalink":"https://arashhs.github.io/project/thats-mytable-v2/","publishdate":"2020-08-18T03:42:44+04:30","relpermalink":"/project/thats-mytable-v2/","section":"project","summary":"Restaurant Table Booking and Food Reservation Web Application Developed Using Java, Spring MVC, Hibernate, and Maven","tags":["Java","Spring MVC","Hibernate","Maven","1"],"title":"That's MyTable V2","type":"project"},{"authors":[],"categories":[],"content":"JTanks is a 2D tank game made in Java for the final project of my Advanced Programming course written at the end of my freshman year at university.\n Both multiplayer and single-player modes are implemented as well as a text-based map editor A balanced loot-based system is implemented with various power-up items - varying from weapon-upgrades to reducing damage taken by the player Featuring three different difficulty settings (Easy, Normal, and Hard) which impacts the maps, enemies, and the amount of damage taken by the player in the game The project is based on Buffer-Strategy implementation and uses multi-threading techniques   Here\u0026rsquo;s some gameplay footage: ","date":1597628001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597628001,"objectID":"5d3363c61f2913dd2b08f506dc3ad469","permalink":"https://arashhs.github.io/project/jtanks-game/","publishdate":"2020-08-17T06:03:21+04:30","relpermalink":"/project/jtanks-game/","section":"project","summary":"A 2D tank game written in Java","tags":["Java","Network","Buffer-Strategy","Multi-Threading","1"],"title":"JTanks Game","type":"project"},{"authors":[],"categories":[],"content":" JDM is a GUI Download Manager written in Java. It supports multiple downloads at the same time (with the ability to limit the maximum number of concurrent downloads), blocking downloads from specific domains, and queueing It is the Midterm Project of my Advanced Programming course.  Application in action: (Click to open in full size on a new tab) \n","date":1597617741,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597617741,"objectID":"7fa80c34b8aff1d2ef992e29b8b4d0c8","permalink":"https://arashhs.github.io/project/jdm/","publishdate":"2020-08-17T03:12:21+04:30","relpermalink":"/project/jdm/","section":"project","summary":"A GUI Java Download Manager with queueing support","tags":["1"],"title":"JDM","type":"project"}]