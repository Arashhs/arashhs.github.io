<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1 | Arash Hajisafi</title>
    <link>https://arashhs.github.io/tag/1/</link>
      <atom:link href="https://arashhs.github.io/tag/1/index.xml" rel="self" type="application/rss+xml" />
    <description>1</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>[Arash Hajisafi](https://arashhs.github.io/) © 2020</copyright><lastBuildDate>Tue, 18 Aug 2020 07:11:04 +0430</lastBuildDate>
    <image>
      <url>https://arashhs.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>1</title>
      <link>https://arashhs.github.io/tag/1/</link>
    </image>
    
    <item>
      <title>Modified Xv6 With New Features</title>
      <link>https://arashhs.github.io/project/modified-xv6-with-new-features/</link>
      <pubDate>Tue, 18 Aug 2020 07:11:04 +0430</pubDate>
      <guid>https://arashhs.github.io/project/modified-xv6-with-new-features/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Implemented a modified version of Xv6&amp;rsquo;s original scheduling algorithm and a modified
priority-based scheduling algorithm to take both the waiting time and importance of a task
into account&lt;/li&gt;
&lt;li&gt;Added system calls to choose the scheduling algorithm in a process, to count the number of
called system calls in a process, and several more features&lt;/li&gt;
&lt;li&gt;Added the ability to measure creation time, termination time, sleeping time, ready time, and
running time of processes to evaluate the performance of the new scheduling algorithms&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Threads and Ticket Lock Implementation in Xv6</title>
      <link>https://arashhs.github.io/project/threads-and-ticket-lock-implementation-in-xv6/</link>
      <pubDate>Tue, 18 Aug 2020 06:58:17 +0430</pubDate>
      <guid>https://arashhs.github.io/project/threads-and-ticket-lock-implementation-in-xv6/</guid>
      <description>&lt;p&gt;I have implemented threads and ticket lock in Xv6 for the final project of my Operating Systems course&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modified XV6 process allocation, execution, and termination implementations to add support
for threads so that each process can have multiple threads&lt;/li&gt;
&lt;li&gt;Modified scheduling algorithm to schedule threads&lt;/li&gt;
&lt;li&gt;Added Ticket Lock to the kernel&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>NetWolf</title>
      <link>https://arashhs.github.io/project/netwolf/</link>
      <pubDate>Tue, 18 Aug 2020 06:27:44 +0430</pubDate>
      <guid>https://arashhs.github.io/project/netwolf/</guid>
      <description>&lt;p&gt;NetWolf is a P2P torrent-like network application written in Python for the final project of my Computer Networks Course with the following capabilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discovering clusters and maintaining a cluster list at each node by periodically sending a UDP customized DISCOVERY message&lt;/li&gt;
&lt;li&gt;Sharing files between nodes by sending a UDP customized GET message (which includes the files name), waiting for the answer, and selecting the best node (fastest response) and then establishing a TCP connection for transmitting the file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Application in action: (Click to open in full size on a new tab)
&lt;a href=&#34;gif.gif&#34; target=&#34;_blank&#34;&gt;
&lt;img src=&#34;gif.gif&#34; alt=&#34;NetWolf © Arash Hajisafi&#34;&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Restaurant Management Database</title>
      <link>https://arashhs.github.io/project/restaurant-management-database/</link>
      <pubDate>Tue, 18 Aug 2020 03:57:01 +0430</pubDate>
      <guid>https://arashhs.github.io/project/restaurant-management-database/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;A database system for restaurant management using Python Tkinter and MySQL for the final
project of my Database Design course&lt;/li&gt;
&lt;li&gt;Applied ER and normalization techniques to design the database and adopted Python to build
a GUI app to connect with the database and add/delete/edit records and tables, and execute
queries on the database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Application in action: (Click to open in full size on a new tab)
&lt;a href=&#34;featured.gif&#34; target=&#34;_blank&#34;&gt;
&lt;img src=&#34;featured.gif&#34; alt=&#34;Restaurant Management Database © Arash Hajisafi&#34;&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>That&#39;s MyTable V2</title>
      <link>https://arashhs.github.io/project/thats-mytable-v2/</link>
      <pubDate>Tue, 18 Aug 2020 03:42:44 +0430</pubDate>
      <guid>https://arashhs.github.io/project/thats-mytable-v2/</guid>
      <description>&lt;p&gt;That&amp;rsquo;s MyTable V2 is a Java Spring MVC and Hibernate project used for the implementation of my Software Engineering (I) project for table booking and food reservations in a restaurant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forked from 
&lt;a href=&#34;https://github.com/ekta2391/Thats-MyTable-Restaurant-Table-Booking-Web-Application&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;That&amp;rsquo;s MyTable!&lt;/a&gt;, a Github repository which we applied different software evolution and maintenance techniques on to adapt the project with newer versions of Java and Spring framework and added many new functionalities such as food reservations and a better implementation for table booking and time management as well as fixing numerous bugs.&lt;/li&gt;
&lt;li&gt;Re-wrote the entire database from the ground up to adapt it with new functionalities&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JTanks Game</title>
      <link>https://arashhs.github.io/project/jtanks-game/</link>
      <pubDate>Mon, 17 Aug 2020 06:03:21 +0430</pubDate>
      <guid>https://arashhs.github.io/project/jtanks-game/</guid>
      <description>&lt;p&gt;JTanks is a 2D tank game made in Java for the final project of my Advanced Programming course written
at the end of my freshman year at university.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both multiplayer and single-player modes are implemented as well as a text-based map editor&lt;/li&gt;
&lt;li&gt;A balanced loot-based system is implemented with various power-up items - varying from weapon-upgrades to reducing damage taken by the player&lt;/li&gt;
&lt;li&gt;Featuring three different difficulty settings (Easy, Normal, and Hard) which impacts the maps, enemies, and the amount of damage taken by the player in the game&lt;/li&gt;
&lt;li&gt;The project is based on Buffer-Strategy implementation and uses multi-threading techniques
&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s some gameplay footage:
&lt;img src=&#34;gameplay.gif&#34; alt=&#34;JTanks Gameplay © Arash Hajisafi&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
